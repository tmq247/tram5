# -*- coding: utf-8 -*-
"""
Module: dl_link
----------------
Th√™m v√†o d·ª± √°n tram5 ƒë·ªÉ t·∫°o LI√äN K·∫æT t·∫£i m·ªôt t·ªáp √¢m thanh (audio/voice) v·ªÅ m√°y.

C√°ch d√πng nhanh:
1) Sao ch√©p file n√†y v√†o: HasiiMusic/plugins/dl_link.py
2) C√†i ph·ª• thu·ªôc: pip install fastapi uvicorn python-multipart
3) (Khuy·∫øn ngh·ªã) ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng:
   - DL_BASE_URL: http://<IP ho·∫∑c domain>:8088
   - DL_BIND: ƒë·ªãa ch·ªâ bind (m·∫∑c ƒë·ªãnh 0.0.0.0)
   - DL_PORT: c·ªïng server (m·∫∑c ƒë·ªãnh 8088)
   - DL_KEEP_MIN: s·ªë ph√∫t link c√≤n s·ªëng (m·∫∑c ƒë·ªãnh 30)
   - DL_ONE_SHOT: 1 (m·∫∑c ƒë·ªãnh) => link t·∫£i 1 l·∫ßn t·ª± hu·ª∑; 0 => nhi·ªÅu l·∫ßn t·ªõi khi h·∫øt h·∫°n
   - DL_ROOT: th∆∞ m·ª•c l∆∞u t·∫°m (m·∫∑c ƒë·ªãnh ./_dl_cache)
4) Kh·ªüi ƒë·ªông bot b√¨nh th∆∞·ªùng. Reply v√†o audio/voice r·ªìi d√πng /dl ho·∫∑c /getlink
"""

from __future__ import annotations
import os, time, socket, hashlib, secrets, threading, mimetypes
# ---- N·∫†P .env (ƒë·ªÉ kh√¥ng ph·ª• thu·ªôc v√†o shell export) ----
try:
    from dotenv import load_dotenv
    load_dotenv()  # t·ª± ƒë·ªông ƒë·ªçc file .env ·ªü th∆∞ m·ª•c d·ª± √°n (n·∫øu c√≥)
except Exception:
    pass
   from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pathlib import Path
from typing import Dict, Optional, Tuple
from pyrogram import Client, filters
from pyrogram.types import Message
from HasiiMusic import app
import unicodedata, urllib.parse
# ==================== C·∫§U H√åNH ====================
DL_BASE_URL = os.environ.get("DL_BASE_URL", "")
DL_BIND = os.environ.get("DL_BIND", "0.0.0.0")
DL_PORT = int(os.environ.get("DL_PORT", "8088"))
DL_KEEP_MIN = int(os.environ.get("DL_KEEP_MIN", "30"))
DL_ONE_SHOT = os.environ.get("DL_ONE_SHOT", "1") == "1"
DL_ROOT = Path(os.environ.get("DL_ROOT", "./_dl_cache")).resolve()
DL_ROOT.mkdir(parents=True, exist_ok=True)

# ==================== FASTAPI SERVER ====================
try:
    from fastapi import FastAPI, HTTPException
    from fastapi.responses import FileResponse
    import uvicorn
except Exception:
    FastAPI = None  # type: ignore

_DL_TABLE: Dict[str, Tuple[Path, float, str, bool]] = {}
_DL_LOCK = threading.RLock()
app_fastapi: Optional[FastAPI] = None
_server_started = False
_server_lock = threading.RLock()

def _now() -> float: return time.time()
def _guess_mime(path: Path) -> str:
    mime, _ = mimetypes.guess_type(str(path))
    return mime or "application/octet-stream"
def _public_base() -> str:
    if DL_BASE_URL: return DL_BASE_URL.rstrip("/")
    try: ip = socket.gethostbyname(socket.gethostname())
    except Exception: ip = "127.0.0.1"
    return f"http://{ip}:{DL_PORT}"

def _cleanup_loop():
    while True:
        try:
            with _DL_LOCK:
                expired = [t for t, (_p, exp, _m, _o) in list(_DL_TABLE.items()) if _now() > exp]
                for t in expired:
                    path = _DL_TABLE[t][0]
                    try:
                        if path.exists(): path.unlink(missing_ok=True)
                    finally:
                        _DL_TABLE.pop(t, None)
        except Exception: pass
        time.sleep(30)
threading.Thread(target=_cleanup_loop, name="dl_cleanup", daemon=True).start()

def ensure_server_running() -> None:
    global app_fastapi, _server_started
    if FastAPI is None:
        raise RuntimeError("C·∫ßn c√†i fastapi & uvicorn: pip install fastapi uvicorn python-multipart")
    with _server_lock:
        if _server_started:
            return
        app_fastapi = FastAPI(title="tram5-dl-link", version="1.0.1")

        @app_fastapi.get("/")
        def root():
            return {"ok": True, "service": "tram5-dl-link", "ttl_min": DL_KEEP_MIN, "one_shot": DL_ONE_SHOT}

        @app_fastapi.get("/dl/{token}")
        def download(token: str):
            import unicodedata, urllib.parse
            with _DL_LOCK:
                meta = _DL_TABLE.get(token)
                if not meta:
                    raise HTTPException(status_code=404, detail="Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
                path, exp, mime, one_shot = meta
                if _now() > exp:
                    _DL_TABLE.pop(token, None)
                    try:
                        path.unlink(missing_ok=True)
                    except Exception:
                        pass
                    raise HTTPException(status_code=410, detail="Token h·∫øt h·∫°n")
                if not path.exists():
                    _DL_TABLE.pop(token, None)
                    raise HTTPException(status_code=404, detail="T·ªáp kh√¥ng c√≤n t·ªìn t·∫°i")
                orig_name = path.name
                ascii_name = unicodedata.normalize("NFKD", orig_name).encode("ascii", "ignore").decode() or "file"
                if not os.path.splitext(ascii_name)[1] and os.path.splitext(orig_name)[1]:
                    ascii_name += os.path.splitext(orig_name)[1]
                utf8_quoted = urllib.parse.quote(orig_name.encode("utf-8"))
                content_disp = "attachment; filename=\"%s\"; filename*=UTF-8''%s" % (ascii_name, utf8_quoted)
                headers = {"Cache-Control": "no-store", "Content-Disposition": content_disp}
                if one_shot:
                    _DL_TABLE.pop(token, None)
                    def _del_later(p: Path):
                        time.sleep(5)
                        try:
                            p.unlink(missing_ok=True)
                        except Exception:
                            pass
                    threading.Thread(target=_del_later, args=(path,), daemon=True).start()
                return FileResponse(str(path), headers=headers, media_type=mime)

        def _run():
            uvicorn.run(app_fastapi, host=DL_BIND, port=DL_PORT, log_level="info")

        threading.Thread(target=_run, name="dl_link_server", daemon=True).start()
        _server_started = True

# ==================== TI·ªÜN √çCH ====================
async def _download_audio_to_temp(client: Client, msg: Message) -> Path:
    if getattr(msg, "audio", None):
        media, name = msg.audio, msg.audio.file_name or f"audio_{msg.id}.mp3"
    elif getattr(msg, "voice", None):
        media, name = msg.voice, f"voice_{msg.id}.ogg"
    else:
        raise ValueError("Tin nh·∫Øn kh√¥ng c√≥ audio/voice")
    safe = "".join(ch if ch.isalnum() or ch in (".", "_", "-") else "_" for ch in name)
    out = DL_ROOT / safe
    out.parent.mkdir(parents=True, exist_ok=True)
    if not out.exists(): await client.download_media(msg, file_name=str(out))
    return out.resolve()

def _make_token(path: Path, minutes: int, mime: str, one_shot: bool = True) -> str:
    payload = f"{path}|{minutes}|{mime}|{one_shot}|{_now()}|{secrets.token_urlsafe(12)}"
    token = hashlib.sha256(payload.encode()).hexdigest()[:32]
    with _DL_LOCK: _DL_TABLE[token] = (path, _now() + minutes * 60.0, mime, one_shot)
    return token

def _build_url(token: str) -> str: return f"{_public_base()}/dl/{token}"

# ==================== L·ªÜNH /dl & /getlink ====================
@app.on_message(filters.command(["dl", "getlink"]) & (filters.private | filters.group))
async def dl_command(client: Client, message: Message):
    try: ensure_server_running()
    except Exception as e:
        await message.reply_text(f"‚ùå Kh√¥ng kh·ªüi ch·∫°y ƒë∆∞·ª£c server t·∫£i: {e}")
        return
    replied = message.reply_to_message
    if not replied:
        await message.reply_text("H√£y reply v√†o 1 tin nh·∫Øn c√≥ audio/voice r·ªìi d√πng /dl")
        return
    try: path = await _download_audio_to_temp(client, replied)
    except Exception as e:
        await message.reply_text(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c audio/voice: {e}")
        return
    mime = _guess_mime(path)
token = _make_token(path, DL_KEEP_MIN, mime, one_shot=DL_ONE_SHOT)
url = _build_url(token)

bullet = "(1 l·∫ßn)" if DL_ONE_SHOT else "(nhi·ªÅu l·∫ßn)"
text = (
    "üîó Link t·∫£i s·∫µn s√†ng\n\n"
    f"‚Ä¢ File: {path.name}\n"
    f"‚Ä¢ Lo·∫°i: {mime}\n"
    f"‚Ä¢ H·∫øt h·∫°n: ~{DL_KEEP_MIN} ph√∫t {bullet}\n"
)

kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨áÔ∏è T·∫£i file", url=url)]])
await message.reply_text(text, reply_markup=kb, disable_web_page_preview=True, parse_mode=None)

# ==================== API n·ªôi b·ªô ====================
async def create_download_link_from_message(client: Client, msg: Message, *, minutes: Optional[int] = None, one_shot: Optional[bool] = None) -> str:
    ensure_server_running()
    path = await _download_audio_to_temp(client, msg)
    mime = _guess_mime(path)
    token = _make_token(path, minutes or DL_KEEP_MIN, mime, one_shot=DL_ONE_SHOT if one_shot is None else one_shot)
    return _build_url(token)

# ==================== /dl_status ====================
@app.on_message(filters.command(["dl_status"]))
async def dl_status(client: Client, message: Message):
    try:
        ensure_server_running()
        base = _public_base()
        await message.reply_text(
            "‚úÖ dl_link ho·∫°t ƒë·ªông.\n"
            f"‚Ä¢ Base: {base}\n"
            f"‚Ä¢ Port: {DL_PORT}\n"
            f"‚Ä¢ TTL m·∫∑c ƒë·ªãnh: {DL_KEEP_MIN} ph√∫t\n"
            f"‚Ä¢ One-shot: {DL_ONE_SHOT}\n"
            f"‚Ä¢ Cache: {DL_ROOT}",
            disable_web_page_preview=True,
        )
    except Exception as e:
        await message.reply_text(f"‚ùå L·ªói: {e}")
